import os
import random
import json
from typing import List, Dict
from dotenv import load_dotenv
from langchain.schema import SystemMessage, HumanMessage
from langchain_gigachat.chat_models import GigaChat
from tools import (
    get_book_recommendations,
    save_user_preferences,
    get_user_preferences,
    add_to_search_history,
    get_random_book,
    get_books_count
)
from database import get_connection

load_dotenv()

system_prompt = """
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
–¢—ã –º–æ–∂–µ—à—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É, –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—é, –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞ (—Ä—É—Å—Å–∫–∏–π/–∑–∞—Ä—É–±–µ–∂–Ω—ã–π) –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
–í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É –≤ —Å–µ—Ä–≤–∏—Å–µ litres.ru.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º!
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

class ChatState:
    def __init__(self):
        self.user_id: int = 1
        self.user_name: str = ""
        self.current_step: str = "get_name"
        self.preferences: Dict = {}
        self.last_recommendations: List[Dict] = []

def format_book(book: Dict) -> str:
    return (
        f"üìñ {book['title']} - {book['author']}\n"
        f"üîπ –ñ–∞–Ω—Ä: {book['genre']}\n"
        f"üîπ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {book.get('age_limit', '–Ω–µ—Ç')}\n"
        f"üîπ –ê–≤—Ç–æ—Ä: {book['author_origin']}\n"
        f"üîπ –†–µ–π—Ç–∏–Ω–≥: {book.get('rating', '–Ω–µ—Ç')}\n"
        f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {book.get('description', '–Ω–µ—Ç')}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {book['url']}\n"
    )

def recommend_random_book(state: ChatState, model: GigaChat, user_input: str):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    print("\nüé≤ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
    
    filters = {}
    default_filters = {
        "—Ä–∞–Ω–¥–æ–º": {},
        "—Å–ª—É—á–∞–π–Ω–∞—è": {},
        "–Ω–µ –∑–Ω–∞—é": {},
        "—á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å": {},
        "–≤—ã–±–µ—Ä–∏": {},
        "–ø—Ä–µ–¥–ª–æ–∂–∏": {}
    }
    
    is_default = any(key in user_input.lower() for key in default_filters.keys())
    
    if not is_default and model:
        try:
            prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª: '{user_input}'. 
            –ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
            –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: genre, age_limit, author_origin.
            –ü—Ä–∏–º–µ—Ä: {{"genre": "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "age_limit": "16+"}}
            """
            response = model([SystemMessage(content=system_prompt), HumanMessage(content=prompt)])
            filters = json.loads(response.content)
            print(f"üîç –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä—ã: {filters}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)}")
            filters = {}

    book = get_random_book.invoke({
        "genre": filters.get("genre"),
        "age_limit": filters.get("age_limit"),
        "author_origin": filters.get("author_origin")
    })
    
    if book:
        print("\n‚ú® –í–æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:")
        print(format_book(book))
        
        add_to_search_history.invoke({
            "user_id": state.user_id,
            "search_query": f"–°–ª—É—á–∞–π–Ω–∞—è: {user_input}",
            "results": [dict(book)]
        })
        
        if model:
            try:
                prompt = f"""
                –Ø —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∫–Ω–∏–≥—É: {book['title']}.
                –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_input}'.
                –°–¥–µ–ª–∞–π —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å –∫–Ω–∏–≥–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è),
                –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å.
                –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                """
                comment = model([SystemMessage(content=system_prompt), 
                              HumanMessage(content=prompt)]).content
                print(f"\nüí° –ú–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment}")

                if random.random() > 0.3:  
                    similar = get_random_book.invoke({"genre": book['genre']})
                    if similar and similar['id'] != book['id']:
                        print(f"\nüìö –í–æ–∑–º–æ–∂–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Ç–∞–∫–∂–µ: {similar['title']}")
            except Exception as e:
                print(f"\n‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}")
    else:
        print("\nüòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.")
        show_fallback_recommendations(state, model, user_input)

def show_fallback_recommendations(state: ChatState, model: GigaChat, user_input: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    total_books = get_books_count.invoke({})
    print(f"\nüìö –í –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {total_books} –∫–Ω–∏–≥, –Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    if model:
        try:
            prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–∞–ª: '{user_input}'.
            –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞,
            –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ "..."
            2. –ò—â–∏—Ç–µ "..."
            3. –í–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è "..."
            """
            advice = model([SystemMessage(content=system_prompt), 
                         HumanMessage(content=prompt)]).content
            print(f"\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n{advice}")
        except Exception as e:
            print(f"\n‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã: {str(e)}")

    fallback_book = get_random_book.invoke({})
    if fallback_book:
        print("\nüé≤ –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:")
        print(format_book(fallback_book))

def recommend_books(state: ChatState, model: GigaChat, params: Dict = None):
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–Ω–∏–≥ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    if not params:
        try:
            user_prefs = get_user_preferences.invoke({"user_id": state.user_id})
            if user_prefs:
                params = {
                    "genre": user_prefs.get("preferred_genres", [None])[0],
                    "age_limit": user_prefs.get("age_limit"),
                    "author_origin": user_prefs.get("author_origin_preference"),
                    "keywords": None
                }
        except Exception as e:
            print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {str(e)}")
            params = {}

    print("\nüîç –ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
    if params.get('genre'):
        print(f"‚Ä¢ –ñ–∞–Ω—Ä: {params['genre']}")
    if params.get('age_limit'):
        print(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {params['age_limit']}+")
    if params.get('author_origin'):
        print(f"‚Ä¢ –ê–≤—Ç–æ—Ä: {params['author_origin']}")
    if params.get('keywords'):
        print(f"‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(params['keywords'])}")

    try:
        books = []
        raw_books = get_book_recommendations.invoke(params)

        for book in raw_books:
            clean_book = {}
            for key, value in book.items():
                if isinstance(value, str):
                    try:
                        clean_book[key] = value.encode('utf-8', errors='replace').decode('utf-8')
                    except:
                        clean_book[key] = "[–¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã]"
                else:
                    clean_book[key] = value
            books.append(clean_book)

        state.last_recommendations = books

        if not books:
            print("\nüòû –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            show_fallback_recommendations(state, model, params)
            return

        print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ {len(books)} –∫–Ω–∏–≥:")
        for i, book in enumerate(books[:5], 1):
            print(f"\n{i}. {format_book(book)}")

        try:
            query = ", ".join(f"{k}:{v}" for k, v in params.items() if v)
            add_to_search_history.invoke({
                "user_id": state.user_id,
                "search_query": query,
                "results": books[:5]  
            })
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")

        if model and books:
            try:
                titles = ", ".join(b['title'] for b in books[:3])
                prompt = f"""–Ø —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∫–Ω–∏–≥–∏: {titles}.
                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: {params}.
                –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —ç—Ç–æ–π –ø–æ–¥–±–æ—Ä–∫–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
                –£–ø–æ–º—è–Ω–∏ –æ–±—â–∏–µ —Ç–µ–º—ã –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏."""
                comment = model([SystemMessage(content=system_prompt), 
                              HumanMessage(content=prompt)]).content
                print(f"\nüí° –û –ø–æ–¥–±–æ—Ä–∫–µ:\n{comment}")
            except Exception as e:
                print(f"\n‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏: {str(e)}")

    except Exception as e:
        print(f"\nüö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥: {str(e)}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")
        show_fallback_recommendations(state, model, params)

def handle_preferences_step(state: ChatState, user_input: str, model: GigaChat):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    if state.current_step == "get_genre":
        state.preferences["genre"] = user_input
        print("\nüîû –ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –ª–∏–º–∏—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12+, 16+, 18+)")
        state.current_step = "get_age_limit"
    
    elif state.current_step == "get_age_limit":
        state.preferences["age_limit"] = user_input
        print("\nüåç –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä—É—Å—Å–∫–∏—Ö –∏–ª–∏ –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤?")
        state.current_step = "get_author_origin"
    
    elif state.current_step == "get_author_origin":
        state.preferences["author_origin"] = user_input
        print("\nüî§ –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–∞–º–ø–∏—Ä—ã, –≥–æ—Ç–∏–∫–∞')")
        state.current_step = "get_keywords"
    
    elif state.current_step == "get_keywords":
        if user_input:
            state.preferences["keywords"] = [kw.strip() for kw in user_input.split(",")]

        save_user_preferences.invoke({
            "user_id": state.user_id,
            "name": state.user_name,
            "preferred_genres": [state.preferences.get("genre")],
            "age_limit": state.preferences.get("age_limit"),
            "author_origin_preference": state.preferences.get("author_origin")
        })

        print("\n‚úÖ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        if model:
            try:
                prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {state.user_name} —É–∫–∞–∑–∞–ª –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:
                –ñ–∞–Ω—Ä: {state.preferences.get('genre')}
                –í–æ–∑—Ä–∞—Å—Ç: {state.preferences.get('age_limit')}
                –ê–≤—Ç–æ—Ä: {state.preferences.get('author_origin')}
                –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {state.preferences.get('keywords', [])}
                
                –ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
                """
                welcome = model([SystemMessage(content=system_prompt), 
                              HumanMessage(content=prompt)]).content
                print(f"\nüí¨ {welcome}")
            except Exception as e:
                print(f"\n‚ÑπÔ∏è {state.user_name}, –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ –≤–∞—à–∏–º –≤–∫—É—Å–∞–º!")

        recommend_books(state, model, {
            "genre": state.preferences.get("genre"),
            "age_limit": state.preferences.get("age_limit"),
            "author_origin": state.preferences.get("author_origin"),
            "keywords": state.preferences.get("keywords", [])
        })
        state.current_step = "main_menu"

def start_chat():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–∞"""
    try:
        print("\nüîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = get_connection()
        
        if not conn:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
            return

        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")

        try:
            model = GigaChat(
                credentials=os.getenv("GIGACHAT_KEY"),
                scope=os.getenv("GIGACHAT_SCOPE"),
                model=os.getenv("GIGACHAT_MODEL"),
                verify_ssl_certs=False
            )
            print("ü§ñ GigaChat –ø–æ–¥–∫–ª—é—á—ë–Ω!")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GigaChat: {str(e)}")
            model = None
        
        state = ChatState()
        total_books = get_books_count.invoke({})
        print(f"\nüìö –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∫–Ω–∏–∂–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í –º–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {total_books} –∫–Ω–∏–≥.")
        print("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        
        while True:
            try:
                user_input = input("\n> ").strip()
                if not user_input:
                    continue
                    
                if state.current_step == "get_name":
                    state.user_name = user_input
                    print(f"\nüëã –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {state.user_name}!")

                    if model:
                        try:
                            prompt = f"""
                            –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {state.user_name},
                            –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
                            –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—á–∞—Ç—å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
                            """
                            greeting = model([SystemMessage(content=system_prompt), 
                                          HumanMessage(content=prompt)]).content
                            print(f"\nüí¨ {greeting}")
                        except Exception as e:
                            print("\n‚ÑπÔ∏è –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º –≤–∞–º –æ—Ç–ª–∏—á–Ω—ã–µ –∫–Ω–∏–≥–∏!")
                    
                    print("\n–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.")
                    print("–ö–∞–∫–æ–π –∂–∞–Ω—Ä —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤, –∫–ª–∞—Å—Å–∏–∫–∞)")
                    state.current_step = "get_genre"
                
                elif state.current_step in ["get_genre", "get_age_limit", "get_author_origin", "get_keywords"]:
                    handle_preferences_step(state, user_input, model)
                
                elif state.current_step == "main_menu":
                    if any(word in user_input.lower() for word in ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–∫–Ω–∏–≥–∏", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "—á—Ç–æ –ø–æ—á–∏—Ç–∞—Ç—å"]):
                        recommend_books(state, model)
                    elif any(word in user_input.lower() for word in ["–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "–∏—â–∏", "–Ω–∞–π—Ç–∏"]):
                        if model:
                            try:
                                print("\nü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
                                response = model([SystemMessage(content=system_prompt), 
                                               HumanMessage(content=f"–ò–∑–≤–ª–µ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–∑: '{user_input}' –≤ JSON")])
                                params = json.loads(response.content)
                                print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
                                recommend_books(state, model, params)
                            except Exception as e:
                                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
                                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É 16+'")
                        else:
                            print("\n‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä—É—á–Ω—É—é.")
                    elif any(word in user_input.lower() for word in ["—Å–ª—É—á–∞–π", "—Ä–∞–Ω–¥–æ–º", "–Ω–µ –∑–Ω–∞—é", "–≤—ã–±–µ—Ä–∏", "–ø—Ä–µ–¥–ª–æ–∂–∏"]):
                        recommend_random_book(state, model, user_input)
                    elif user_input.lower() in ["–≤—ã—Ö–æ–¥", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "—Å—Ç–æ–ø"]:
                        print("\nüìñ –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.")
                        break
                    else:
                        if model:
                            try:
                                print("\nü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
                                response = model([SystemMessage(content=system_prompt), 
                                               HumanMessage(content=user_input)])
                                print(f"\nüí¨ {response.content}")
                            except Exception as e:
                                print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
                                print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: '–Ω–∞–π–¥–∏ –∫–Ω–∏–≥–∏', '—Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'")
                        else:
                            print("\n‚ÑπÔ∏è –Ø –º–æ–≥—É: '—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏', '–Ω–∞–π—Ç–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', '–≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é'")
                        
            except (EOFError, KeyboardInterrupt):
                print("\nüìñ –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ó–∞—Ö–æ–¥–∏—Ç–µ –µ—â—ë.")
                break

    except Exception as e:
        print(f"\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

if __name__ == "__main__":
    start_chat()